using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pacman
{
    internal class Map
    {
        public char[,] level = new char[,] { };
        public int size = 0;
        private int counter = 0;
        public Map(int celdaSize)
        {
            //28 31
            level = new char[,] {
                { '2','2','2','2','2','2','2','2','2','2','2','2','2','2','1','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2'},
                { '2','p','p','p','p','p','p','p','p','2','1','1','1','2','1','2','1','1','1','2','p','p','p','p','2','2','p','p','p','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','1','1','1','2','1','2','1','1','1','2','p','2','2','p','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','1','1','1','2','1','2','1','1','1','2','p','2','2','p','p','p','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','1','1','1','2','1','2','1','1','1','2','p','2','2','2','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','2','2','2','2','1','2','2','2','2','2','p','2','2','2','2','2','p','2','2','p','2'},
                { '2','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','2','2','2','2','2','2','1','2','2','2','2','2','p','2','2','p','2','2','2','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','2','2','2','2','2','2','1','2','2','2','2','2','p','2','2','p','2','2','2','2','2','p','2'},
                { '2','p','2','2','2','p','1','1','p','2','2','1','1','1','1','1','1','1','1','1','p','2','2','p','1','1','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','2','1','2','2','2','2','2','1','2','2','p','2','2','p','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','2','1','2','3','3','3','2','1','2','2','p','2','2','p','2','2','p','2','2','p','2'},
                { '2','p','1','1','1','p','2','2','p','1','1','1','2','3','3','3','2','1','2','2','p','p','p','p','2','2','p','p','p','p','2'},
                { '2','2','2','2','2','p','2','2','2','2','2','1','3','3','3','3','2','1','2','2','2','2','2','p','2','2','2','2','2','p','2'},
                { '2','2','2','2','2','p','2','2','2','2','2','1','3','3','3','3','2','1','2','2','2','2','2','p','2','2','2','2','2','p','2'},
                { '2','p','p','p','p','p','2','2','p','1','1','1','2','3','3','3','2','1','2','2','p','p','p','p','2','2','p','p','p','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','2','1','2','3','3','3','2','1','2','2','p','2','2','p','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','p','2','2','1','2','2','2','2','2','1','2','2','p','2','2','p','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','1','1','p','2','2','1','1','1','1','1','1','1','1','1','p','2','2','p','p','p','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','2','2','2','2','2','2','1','2','2','2','2','2','p','2','2','p','2','2','2','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','2','2','2','2','2','2','1','2','2','2','2','2','p','2','2','p','2','2','2','2','2','p','2'},
                { '2','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','1','2','2','2','2','2','1','2','2','2','2','2','p','2','2','2','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','1','2','1','1','1','2','1','2','1','1','1','2','p','2','2','2','2','2','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','1','2','1','1','1','2','1','2','1','1','1','2','p','2','2','p','p','p','p','2','2','p','2'},
                { '2','p','2','2','2','p','2','2','1','2','1','1','1','2','1','2','1','1','1','2','p','2','2','p','2','2','p','2','2','p','2'},
                { '2','p','p','p','p','p','1','1','1','2','1','1','1','2','1','2','1','1','1','2','p','p','p','p','2','2','p','p','p','p','2'},
                { '2','2','2','2','2','2','2','2','2','2','2','2','2','2','1','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2','2'}



            };

            size = celdaSize;
        }

        public void DrawMap(Graphics graphics)
        {
            for (int y = 0; y < this.level.GetLength(0); y++)
            {

                for (int x = 0; x < this.level.GetLength(1); x++)
                {
                    //graphics.FillRectangle(Brushes.Yellow, x * size, y * size, size, size);

                    switch (this.level[y, x])
                    {
                        case '1':
                            graphics.FillRectangle(Brushes.Black, y * size, x * size, size, size);

                            break;
                        //case 'a':
                        //    Ladrillo.DrawLadrillo(graphics,x,y,size);
                        //    break;
                        case 'p':
                            Pill.DrawPill(graphics, y, x, size, y);
                            break;
                        case 'b':
                            Pacman.DrawPacman(graphics, y, x, size);
                            break;






                        default: break;
                    }
                }
            }
        }

        public void MoveUp(Pacman pacman)
        {
            int x = pacman.pos.X;
            int y = pacman.pos.Y;

         
                if (this.level[y, x-1] == '1' || this.level[y, x-1] == 'p') // pass tile
                {
                    this.level[y, x-1] = 'b';
                    pacman.pos.X--;
                    this.level[y, x] = '1';
                }
      
            

        }
        public void MoveDown(Pacman pacman)
        {
            int x = pacman.pos.X;
            int y = pacman.pos.Y;

           
                if (this.level[y, x+1] == '1' || this.level[y, x+1] == 'p') // pass tile
                {
                    this.level[y, x+1] = 'b';
                    pacman.pos.X++;
                    this.level[y, x] = '1';
                }
             
            
        }
        public void MoveRight(Pacman pacman)
        {
            int x = pacman.pos.X;
            int y = pacman.pos.Y;


            Debug.WriteLine($"the next char is {this.level[y + 1, x]}");
            if (this.level[y+1, x] == '1' || this.level[y+1, x] == 'p') // pass tile
                {
                    
                    pacman.pos.Y++;
                    this.level[ y + 1,x] = 'b';
                this.level[y, x] = '1';
            }
           
            


        }
        public void MoveLeft(Pacman pacman)
        {
            int x = pacman.pos.X;
            int y = pacman.pos.Y;

            
            Debug.WriteLine($"the next char is {this.level[y - 1, x]}");
            if(this.level[y - 1, x] == '1' || this.level[y - 1, x] == 'p')
            {
                pacman.pos.Y--;
                this.level[y - 1,x] = 'b';
                this.level[y, x] = '1';
            }

            //if (this.level[x, y-1] == '1' || this.level[x, y-1] == 'p') // pass tile
            //    {
            //        this.level[x, y-1] = 'b';
            //        pacman.pos.X--;
            //        this.level[x, y] = '1';
            //    }
            //    else
            //    {
            //        // do nothing
            //    }



        }

        public void TimerCounter()
        {
            counter++;
        }

        public void SpawnPacman(Pacman pacman)
        {
            int x = pacman.pos.X;
            int y = pacman.pos.Y;
            Debug.WriteLine("a");


            this.level[x, y] = 'b';



        }
        public void DrawFromResource(Graphics graphics, int x, int y, int size, Image image)
        {
            graphics.DrawImage(image, new Rectangle(x * size, y * size, size, size));
        }
    }
}
